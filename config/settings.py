"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os # Додаємо імпорт os для роботи зі шляхами
import dj_database_url # Додано для Render

# Завантаження змінних середовища з .env файлу
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-!!!ЗАМІНИТИ_ЦЕ_У_ПРОДАКШЕНІ!!!') # Змінено для Render

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True # Оригінальне значення
DEBUG = 'RENDER' not in os.environ # Змінено для Render (False, якщо є змінна RENDER)

# ALLOWED_HOSTS = [] # Оригінальне значення
ALLOWED_HOSTS = []

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Дозволити localhost для локальних тестів prod налаштувань
if not RENDER_EXTERNAL_HOSTNAME: # Або інша логіка визначення локального середовища
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'prometei', # Додаємо наш додаток
    'prometei.apps.PrometeiConfig', # Переконайся, що твій додаток тут
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Додано для Render (після SecurityMiddleware)
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Перевір цей шлях, якщо шаблони лежать деінде
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',  # Додаємо контекстний процесор i18n
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = 'config.asgi.application' # Додано, якщо використовуєш ASGI


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Оригінальна конфігурація SQLite:
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# Нова конфігурація для PostgreSQL на Render:
DATABASES = {
    'default': dj_database_url.config(
        # Зчитує DATABASE_URL зі змінної середовища
        # Значення за замовчуванням для локальної розробки (якщо DATABASE_URL не встановлено):
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}", # Або твоя локальна Postgres URL
        conn_max_age=600 # Опціонально
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'uk'

LANGUAGES = [
    ('uk', 'Українська'),
    ('en', 'English'),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

TIME_ZONE = 'Europe/Kyiv'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = 'media/' # Якщо використовуєш медіа файли

# STATICFILES_DIRS визначає, де шукати статику в розробці
STATICFILES_DIRS = [
    BASE_DIR / 'prometei' / 'static', # Перевір цей шлях
]

# Налаштування для WhiteNoise у продакшені
if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_ROOT = BASE_DIR / 'mediafiles' # Якщо використовуєш медіа файли

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email configuration
# Налаштування для відправки електронної пошти

# Змінено: Увімкнено SMTP бекенд для реальної відправки
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Закоментовано: Старий варіант з консольним бекендом
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Закоментовано: Варіант вибору бекенду залежно від режиму (DEV/PROD)
# if not DEBUG:
#     EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#     # Або можна використовувати Mailgun:
#     # EMAIL_BACKEND = 'anymail.backends.mailgun.EmailBackend'

# Налаштування для SMTP
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'your-email@gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'your-password')

# Налаштування для Mailgun
ANYMAIL = {
    "MAILGUN_API_KEY": os.environ.get('MAILGUN_API_KEY', ''),
    "MAILGUN_SENDER_DOMAIN": os.environ.get('MAILGUN_DOMAIN', 'mg.prometeylabs.com'),
}

# Для Gmail потрібно створити пароль додатку: 
# https://myaccount.google.com/apppasswords

# Адреса, з якої будуть надсилатися листи
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'Prometey Labs <info@prometeylabs.com>')

# Адреса, на яку будуть надходити контактні запити
CONTACT_EMAIL = os.environ.get('CONTACT_EMAIL', 'info@prometeylabs.com')

# Налаштування логування
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/prometei.log'),
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        }
    },
    'loggers': {
        'django': {
            # Визначаємо обробники динамічно: 'console' та 'file' локально, лише 'console' на Render
            'handlers': ['console', 'file'] if DEBUG else ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'prometei': { # Якщо ти використовуєш логування в своєму додатку
             # Визначаємо обробники динамічно: 'console' та 'file' локально, лише 'console' на Render
            'handlers': ['console', 'file'] if DEBUG else ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO', # На Render менш детальні логи
            'propagate': False,
        },
    },
}

# Примусово вимикаємо файлове логування на Render
if 'RENDER' in os.environ:
    LOGGING['loggers']['django']['handlers'] = ['console']
    if 'prometei' in LOGGING['loggers']:
        LOGGING['loggers']['prometei']['handlers'] = ['console']
    # Також можна видалити сам хендлер 'file', якщо він більше ніде не потрібен:
    # if 'file' in LOGGING['handlers']:
    #     del LOGGING['handlers']['file']
